# -*- coding: utf-8 -*-
"""0511クラスタリング完成版.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lBasbLWXMQ61ihjiBJhcnIVvwONLj4zT
"""

import seaborn as sns
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import pandas as pd
from io import StringIO
from sklearn.preprocessing import LabelEncoder
from matplotlib import pyplot as plt
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer

# データセットを読み込み
path = "test/content/0511data05.csv"
# CSVファイルの読み込み
df = pd.read_csv(path, encoding="UTF-8")
# 前方10件を表示します。

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
df_norm = sc.fit_transform(df)
df_norm = pd.DataFrame(df_norm)

#標準化
df_norm

from sklearn.cluster import KMeans
model = KMeans(n_clusters=3, random_state=1)
clusters = model.fit(df_norm)

cluster = clusters.labels_

df['cluster'] = cluster

df

df.to_csv("output.csv")

#クラスター０：授業技術は高いが対話性が低いグループ
#クラスター１：全体的に指導計画から見直しが必要グループ
#クラスター２：対話性が高いが、学習者に投げやりになっている恐れがあるグループ

distortions = []

for i  in range(1,11):                # 1~10クラスタまで一気に計算 
    km = KMeans(n_clusters=i,
                init='k-means++',     # k-means++法によりクラスタ中心を選択
                n_init=10,
                max_iter=300,
                random_state=0)
    km.fit(df_norm)                         # クラスタリングの計算を実行
    distortions.append(km.inertia_)   # km.fitするとkm.inertia_が得られる
plt.plot(range(1,11),distortions,marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Distortion')
plt.show()

df.groupby('cluster').mean().style.bar(axis=0)

import matplotlib.pyplot as plt
import seaborn as sns
fig, axes = plt.subplots(2,3, figsize=(14, 6))
sns.barplot(ax=axes[0,0], data=df, x='cluster', y='team')
sns.barplot(ax=axes[0,1], data=df, x='cluster', y='Individual')
sns.barplot(ax=axes[0,2], data=df, x='cluster', y='back')
sns.barplot(ax=axes[1,0], data=df, x='cluster', y='ICT')
sns.barplot(ax=axes[1,1], data=df, x='cluster', y='Goodness')

df_norm['cluster'] = cluster

from sklearn.decomposition import PCA
pca = PCA(n_components=2, random_state=3)
pca.fit(df_norm)

feature = pca.transform(df_norm)

feature

import matplotlib.pyplot as plt
plt.figure(figsize=(6, 6))

plt.scatter(feature[:, 0], feature[:, 1], alpha=0.7, c=cluster)
plt.xlabel('principal component 1')
plt.ylabel('principal component 2')
plt.show()
